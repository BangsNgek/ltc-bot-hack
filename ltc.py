import base64

exec(base64.b64decode("from telethon import TelegramClient, sync, events
from telethon.tl.functions.messages import (
    GetHistoryRequest,
    GetBotCallbackAnswerRequest,
)
from telethon.errors import SessionPasswordNeededError
from telethon.errors import FloodWaitError
from time import sleep
import json, re, sys, os

try:
    import requests
    from bs4 import BeautifulSoup
except:
    print(
        "\033[1;30m# \033[1;31mHmmm Sepertinya Modul Requests Dan Bs4 Belum Terinstall\n\033[1;30m# \033[1;31mTo install Please Type pip install requests and pip install bs4"
    )
    sys.exit()

c = requests.Session()
ua = {
    "User-Agent": "Mozilla/5.0 (Linux; Android 5.1; A1603 Build/LMY47I; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/43.0.2357.121 Mobile Safari/537.36"
}


def password():
    c = requests.Session()

    if not os.path.exists(".password"):
        os.makedirs(".password")

    print(
        "\033[1;32mSilahkan Ambil Password Pada Link Di Bawah Ini\033[1;0m\nhttps://bangsngek.vip-executive.site/"
    )
    if not os.path.exists(".password/password.txt"):
        f = open(".password/password.txt", "w+")
        f.write("wkwkwkwkw")
        f.close()

    for i in range(99):
        f = open(".password/password.txt", "r")
        if f.readlines()[0] == c.get("http://bangsngek.vip-executive.site/bangsngek.txt", headers=ua, timeout=15).text:
            sys.stdout.write("\r                                                \r")
            sys.stdout.write("\r\033[1;32mUsing Exiting Password....!")
            break
        pwin = input("\033[1;32mEnter Password \033[1;30m:\033[1;0m")
        pw = c.get("http://bangsngek.vip-executive.site/?p=get")
        if pwin == c.get("http://bangsngek.vip-executive.site/?p=get", headers=ua, timeout=15).text:
            c.get("http://bangsngek.vip-executive.site/?p=del", headers=ua, timeout=15).text
            f = open(".password/password.txt", "w+")
            f.write(pwin)
            f.close()
            print(hijau + "\rPassword Benar:)")
            break
        else:
            print("\033[1;31mPassword Salah...!")
            if i > 1:
                print(
                    "\033[1;33mSilahkan Check Password Pada Link Di Bawah Ini\n\033[1;0mhttps://bangsngek.vip-executive.site"
                )
                sys.exit()
                

ungu = "\033[1;35m"
biru = "\033[1;34m"
hijau = "\033[1;32m"
putih = "\033[1;0m"
kuning = "\033[1;33m"
merah = "\033[1;31m"
nomer = open("Numbers.txt", "r")

banner = """\033[0;34m
 _   _____ ____    ____ _ _      _      ____        _
| | |_   _/ ___|  / ___| (_) ___| | __ | __ )  ___ | |_
| |   | || |     | |   | | |/ __| |/ / |  _ \ / _ \| __|
| |___| || |___  | |___| | | (__|   <  | |_) | (_) | |_
|_____|_| \____|  \____|_|_|\___|_|\_\ |____/ \___/ \__|
\033[0;33m=========================================================
\033[1;32mAuthor By  \033[1;31m :\033[1;0m Bangs Ngek
\033[1;32mChannel Yt\033[1;31m  :\033[1;0m SapuJagad Gaming
\033[1;32mMy Website  \033[1;31m:\033[1;0m https://vip-executive.site
\033[0;33m========================================================="""

if not os.path.exists("session"):
    os.makedirs("session")
    
os.system("clear")
password()
print(banner)


def tunggu(x):
    sys.stdout.write("\r")
    sys.stdout.write("                                                               ")
    for remaining in range(x, 0, -1):
        sys.stdout.write("\r")
        sys.stdout.write(
            "\033[1;30m[+]\033[1;0m{:2d} \033[1;32msilahkan tunggu...".format(remaining)
        )
        sys.stdout.flush()
        sleep(1)


api_id = 717425
api_hash = "322526d2c3350b1d3530de327cf08c07"
phone_number = nomer.read()

client = TelegramClient("session/" + phone_number, api_id, api_hash)
client.connect()
if not client.is_user_authorized():
    try:
        client.send_code_request(phone_number)
        me = client.sign_in(phone_number, input("\n\n\n\033[1;0mEnter Your Code : "))
    except SessionPasswordNeededError:
        passw = input("\033[1;0mYour 2fa Password : ")
        me = client.start(phone_number, passw)
myself = client.get_me()
os.system("clear")
print(banner)
print(
    "\033[1;0mWelcome To TeleBot",
    myself.first_name,
    "\n\033[1;0mBot Ini Di Gunakan Untuk Menuyul LTC Click Bot",
    "\n\033[0;33m=========================================================",
)


print("\n\033[1;37mMemulai Menuyul......!")
try:
    channel_entity = client.get_entity("@Litecoin_click_bot")
    channel_username = "@Litecoin_click_bot"
    for i in range(5000000):
        sys.stdout.write("\r")
        sys.stdout.write(
            "                                                              "
        )
        sys.stdout.write("\r")
        sys.stdout.write("\033[1;30m[+] \033[1;34mMencoba Mengambil URL")
        sys.stdout.flush()
        client.send_message(entity=channel_entity, message="🖥 Visit sites")
        sleep(3)
        posts = client(
            GetHistoryRequest(
                peer=channel_entity,
                limit=1,
                offset_date=None,
                offset_id=0,
                max_id=0,
                min_id=0,
                add_offset=0,
                hash=0,
            )
        )
        if (
            posts.messages[0].message.find("Sorry, there are no new ads available")
            != -1
        ):
            print("\n\033[1;30m[+] \033[1;31mIklan Sudah Habis Coba Lagi Besok")
            client.send_message(entity=channel_entity, message="💰 Balance")
            sleep(5)
            posts = client(
                GetHistoryRequest(
                    peer=channel_entity,
                    limit=1,
                    offset_date=None,
                    offset_id=0,
                    max_id=0,
                    min_id=0,
                    add_offset=0,
                    hash=0,
                )
            )
            message = posts.messages[0].message
            print(kuning + "====================[ " + biru + "Balance" + kuning + " ]==========================" + putih)
            print(message)
            print(kuning + "=========================================================" + putih)
            sys.exit()
        else:
            try:
                url = posts.messages[0].reply_markup.rows[0].buttons[0].url
                sys.stdout.write("\r")
                sys.stdout.write("\033[1;30m[+]\033[1;33m [" + hijau + "Waitting" + kuning  + "]=>> Visit " + url)
                sys.stdout.flush()
                id = posts.messages[0].id
                r = c.get(url, headers=ua, timeout=15, allow_redirects=True)
                soup = BeautifulSoup(r.content, "html.parser")
                if (
                    soup.find("div", class_="g-recaptcha") is None
                    and soup.find("div", id="headbar") is None
                ):
                    sleep(2)
                    posts = client(
                        GetHistoryRequest(
                            peer=channel_entity,
                            limit=1,
                            offset_date=None,
                            offset_id=0,
                            max_id=0,
                            min_id=0,
                            add_offset=0,
                            hash=0,
                        )
                    )
                    message = posts.messages[0].message
                    if (
                        posts.messages[0].message.find("You must stay") != -1
                        or posts.messages[0].message.find("Please stay on") != -1
                    ):
                        sec = re.findall(r"([\d.]*\d+)", message)
                        tunggu(int(sec[0]))
                        sleep(1)
                        posts = client(
                            GetHistoryRequest(
                                peer=channel_entity,
                                limit=2,
                                offset_date=None,
                                offset_id=0,
                                max_id=0,
                                min_id=0,
                                add_offset=0,
                                hash=0,
                            )
                        )
                        messageres = posts.messages[1].message
                        sleep(2)
                        sys.stdout.write("\r\033[1;30m[+] \033[1;32m" + messageres + "\n")
                    else:
                        pass

                elif soup.find("div", id="headbar") is not None:
                    for dat in soup.find_all("div", class_="container-fluid"):
                        code = dat.get("data-code")
                        timer = dat.get("data-timer")
                        tokena = dat.get("data-token")
                        tunggu(int(timer))
                        r = c.post(
                            "https://dogeclick.com/reward",
                            data={"code": code, "token": tokena},
                            headers=ua,
                            timeout=15,
                            allow_redirects=True,
                        )
                        js = json.loads(r.text)
                        sys.stdout.write(
                            "\r\033[1;30m[+] \033[1;32m [" + merah + "<" + kuning + "Berhasil" + merah + ">" + hijau + "]" + kuning + "=>>" + hijau + "Berhasil mendapatkan " +js["reward"]
                            + " LTC setelah visit site!\n"
                        )
                else:
                    sys.stdout.write("\r")
                    sys.stdout.write(
                        "                                                                "
                    )
                    sys.stdout.write("\r")
                    sys.stdout.write("\033[1;30m[+] \033[1;31mCaptcha Detected")
                    sys.stdout.flush()
                    sleep(2)
                    client(
                        GetBotCallbackAnswerRequest(
                            channel_username,
                            id,
                            data=posts.messages[0].reply_markup.rows[1].buttons[1].data,
                        )
                    )
                    sys.stdout.write(
                        "\r\033[1;30m[+] \033[1;31mSkip Captcha...!       \n"
                    )
                    sleep(2)
            except:
                sleep(3)
                posts = client(
                    GetHistoryRequest(
                        peer=channel_entity,
                        limit=1,
                        offset_date=None,
                        offset_id=0,
                        max_id=0,
                        min_id=0,
                        add_offset=0,
                        hash=0,
                    )
                )
                message = posts.messages[0].message
                if (
                    posts.messages[0].message.find("You must stay") != -1
                    or posts.messages[0].message.find("Please stay on") != -1
                ):
                    sec = re.findall(r"([\d.]*\d+)", message)
                    tunggu(int(sec[0]))
                    sleep(1)
                    posts = client(
                        GetHistoryRequest(
                            peer=channel_entity,
                            limit=2,
                            offset_date=None,
                            offset_id=0,
                            max_id=0,
                            min_id=0,
                            add_offset=0,
                            hash=0,
                        )
                    )
                    messageres = posts.messages[1].message
                    sleep(2)
                    sys.stdout.write("\r\033[1;30m[+] \033[1;32m [" + merah + "<" + kuning + "Berhasil" + merah + ">" + hijau + "]" + kuning + "=>>" + hijau + messageres + "\n")
                else:
                    pass

finally:
    client.disconnect()
"))